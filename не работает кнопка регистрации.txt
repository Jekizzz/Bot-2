from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackContext, CallbackQueryHandler, CommandHandler, MessageHandler, Filters, Updater
import sqlite3
import datetime

TOKEN = "6359230583:AAEUNuMF2esZNbgOJZmx2VxEOxPLis6Ek5w"
admin_id = "1116569058"
admin_username = "Jekizzz_z"
channel_id = "-992636746"
draw_id = 0
last_message_id = None
participant_count = 0
def is_admin(username):
    return username == admin_username

conn = sqlite3.connect('your_database.db', check_same_thread=False)
cursor = conn.cursor()

# Создание таблиц для каждого тиража
cursor.execute('''CREATE TABLE IF NOT EXISTS draw_table
             (username TEXT, name TEXT, number INTEGER, screenshot BLOB, payment_status TEXT, timestamp TEXT, draw_id INTEGER)''')


# Сохраняем изменения
conn.commit()

updater = Updater(token=TOKEN, use_context=True)
dispatcher = updater.dispatcher

def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("Регистрация", callback_data='register')],
        [InlineKeyboardButton("Чат с Админом", url=f"tg://user?id={admin_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # Замените 'welcome_image.jpg' на путь к вашему файлу
    with open('welcome_image.jpg', 'rb') as photo:
        context.bot.send_photo(chat_id=update.effective_chat.id, photo=photo,
                               caption="Добро пожаловать в нашу лотерею! Пожалуйста, выберите действие.",
                               reply_markup=reply_markup)

start_handler = CommandHandler('start', start)
dispatcher.add_handler(start_handler)

# Функция проверяет, зарегистрирован ли пользователь в текущем тираже
def is_participant(username, draw_id):
    cursor.execute("SELECT * FROM draw_table WHERE username=? AND draw_id=?", (username, draw_id,))
    result = cursor.fetchone()
    return result is not None

    # Обработчик кнопки 'Регистрация'
def register(update: Update, context: CallbackContext):
    global participant_count, last_message_id, draw_id  # Добавить глобальные переменные здесь
    table_name = "ТИРАЖ " + str(draw_id)  # Обновить table_name здесь
    query = update.callback_query
    username = query.from_user.username
    user_id = query.from_user.id
    chat_id = query.message.chat_id


    cursor.execute(f"SELECT * FROM {table_name} WHERE username=?", (username,))
    data = cursor.fetchone()

    # Если пользователь еще не зарегистрирован, регистрируем его
    if data is None:
        cursor.execute(f"INSERT INTO {table_name} (username, chat_id, order_number, screenshot, payment_status, time) VALUES (?, ?, ?, ?, ?, ?, ?)",
        (username, chat_id, participant_count, None, "Неоплачено", str(datetime.now())))
        conn.commit()

        participant_count += 1

        context.bot.send_message(chat_id=chat_id,
                                 text=f"Вы успешно зарегистрированы под номером {participant_count}! Пожалуйста, оплатите участие в тираже и отправьте скриншот оплаты.")

        # Отправляем уведомление в канал о новом участнике
        message = context.bot.send_message(chat_id=channel_id,
                                           text=f"Количество зарегистрированных участников: {participant_count}")
        message_id = message.message_id
        context.bot.pin_chat_message(chat_id=channel_id, message_id=message_id, disable_notification=True)

        if last_message_id:
            context.bot.delete_message(chat_id=channel_id, message_id=last_message_id)

        last_message_id = message_id
    else:
        context.bot.send_message(chat_id=chat_id, text="Вы уже зарегистрированы на этот тираж.")

def payment(update: Update, context: CallbackContext):
    username = update.message.from_user.username
    chat_id = update.message.chat_id
    screenshot = update.message.photo[-1].file_id  # Получаем id фотографии (скриншота оплаты)

    global draw_id  # Добавить глобальную переменную здесь
    table_name = "ТИРАЖ " + str(draw_id)  # Обновить table_name здесь
    cursor.execute(f"UPDATE {table_name} SET screenshot=? WHERE username=?", (screenshot, username))
    conn.commit()

    context.bot.send_message(chat_id=chat_id, text="Ваш скриншот оплаты успешно принят! Ожидайте подтверждения от администратора.")

payment_handler = MessageHandler(Filters.photo, payment)
dispatcher.add_handler(payment_handler)

# Обработчик команды 'check' (для администратора)
def check(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    username = update.message.from_user.username

    if is_admin(username):
        global draw_id  # Добавить глобальную переменную здесь
        table_name = "ТИРАЖ " + str(draw_id)  # Обновить table_name здесь
        cursor.execute(f"SELECT username, screenshot FROM {table_name} WHERE payment_status=?", ("Неоплачено",))
        unpaid_payments = cursor.fetchall()

        for payment in unpaid_payments:
            context.bot.send_message(chat_id=chat_id, text=f"Пользователь: {payment[0]}\nСтатус оплаты: Неоплачено")
            context.bot.send_photo(chat_id=chat_id, photo=payment[1])

check_handler = CommandHandler('check', check)
dispatcher.add_handler(check_handler)

# Обработчик команды 'confirm' (для администратора)
def confirm(update: Update, context: CallbackContext):
    username = update.message.from_user.username
    chat_id = update.message.chat_id
    confirmed_username = update.message.text.split()[1]  # Получаем username пользователя из текста сообщения

    if is_admin(username):
        global draw_id  # Добавить глобальную переменную здесь
        table_name = "ТИРАЖ " + str(draw_id)  # Обновить table_name здесь
        cursor.execute(f"UPDATE {table_name} SET payment_status=? WHERE username=?", ("Оплачено", confirmed_username))
        conn.commit()

        context.bot.send_message(chat_id=chat_id, text=f"Оплата пользователя {confirmed_username} подтверждена.")

confirm_handler = CommandHandler('confirm', confirm)
dispatcher.add_handler(confirm_handler)

# Обработчик команды 'end_draw' (для администратора)
def end_draw(update: Update, context: CallbackContext):
    username = update.message.from_user.username
    chat_id = update.message.chat_id

    if is_admin(username):
        global draw_id  # Добавить глобальную переменную здесь
        waiting_list_table = "ЛИСТ ОЖИДАНИЯ ТИРАЖА " + str(draw_id + 1)
        cursor.execute(f"CREATE TABLE IF NOT EXISTS {waiting_list_table} (username TEXT, name TEXT, timestamp TEXT)")
        table_name = "ТИРАЖ " + str(draw_id)  # Обновить table_name здесь
        cursor.execute(f"SELECT username FROM {table_name}")
        participants = cursor.fetchall()

        for participant in participants:
            context.bot.send_message(chat_id=participant[0], text="Регистрация на текущий тираж завершена. Вся информация о розыгрыше на канале.")

        context.bot.send_message(chat_id=chat_id, text="Тираж завершен.")

end_draw_handler = CommandHandler('end_draw', end_draw)
dispatcher.add_handler(end_draw_handler)

def add_to_waiting_list(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    username = update.message.from_user.username

    global draw_id  # Добавить глобальную переменную здесь
    waiting_list_table = "ЛИСТ ОЖИДАНИЯ ТИРАЖА " + str(draw_id + 1)  # Обновить waiting_list_table здесь
    cursor.execute(f"CREATE TABLE IF NOT EXISTS {waiting_list_table} (username TEXT, chat_id INTEGER)")
    cursor.execute(f"INSERT INTO {waiting_list_table} VALUES (?, ?)", (username, chat_id))
    conn.commit()

dispatcher.add_handler(CommandHandler("add_to_waiting_list", add_to_waiting_list))

def new_draw(update: Update, context: CallbackContext):
    query = update.message
    username = query.from_user.username
    user_id = query.from_user.id
    chat_id = query.message.chat_id

    if is_admin(username):
        global draw_id, participant_count, last_message_id  # добавьте эти переменные здесь
        draw_id += 1
        participant_count = 0  # сбросите счетчик
        last_message_id = None  # сбросите идентификатор последнего

        # Создание новой таблицы для нового тиража
        table_name = "ТИРАЖ " + str(draw_id)
        cursor.execute(f"CREATE TABLE {table_name} (full_name TEXT, order_number INTEGER, screenshot TEXT, payment_status TEXT, time TEXT)")
        conn.commit()

        # Отправка уведомления о новом тираже всем участникам прошлого тиража
        previous_draw_table = "ТИРАЖ " + str(draw_id - 1)
        cursor.execute(f"SELECT username FROM {previous_draw_table}")
        previous_participants = cursor.fetchall()

        for participant in previous_participants:
            context.bot.send_message(chat_id=participant[0], text="Новый тираж лотереи начался! Вы можете зарегистрироваться снова командой /register")

        # Отправка уведомления о новом тираже всем подписанным на уведомления
    waiting_list_table = "ЛИСТ ОЖИДАНИЯ ТИРАЖА " + str(draw_id)
    cursor.execute(f"SELECT chat_id FROM {waiting_list_table}")
    waiting_list = cursor.fetchall()

    for user in waiting_list:
        context.bot.send_message(chat_id=user[0], text="Новый тираж лотереи начался! Вы можете зарегистрироваться снова командой /register")

# Регистрация обработчика
dispatcher.add_handler(CommandHandler("new_draw", new_draw))

if __name__ == "__main__":
    print("OK, bot has started")
    try:
        updater.start_polling()
    except Exception as e:
        print(f"An error occurred: {e}")
    updater.idle()
    print("Bot has stopped")
